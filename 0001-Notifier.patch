From d16b6b1e899ebf413fda190b283c1b8165c54388 Mon Sep 17 00:00:00 2001
From: xMrYoyo <encryptingmyself@gmail.com>
Date: Wed, 11 Dec 2024 19:01:00 +0100
Subject: [PATCH] Notifier

---
 .gitignore                          |  1 +
 factory/status/statusComponents.go  | 10 +++++
 node/nodeRunner.go                  |  3 ++
 outport/disabled/disabledOutport.go |  4 ++
 outport/factory/outportFactory.go   | 15 ++++---
 outport/host/driver.go              |  5 +++
 outport/interface.go                |  2 +
 outport/notifier/eventNotifier.go   | 12 ++++++
 outport/outport.go                  | 64 ++++++++++++++++++++++++++++-
 9 files changed, 109 insertions(+), 7 deletions(-)

diff --git a/.gitignore b/.gitignore
index 7309b40c38..f561669636 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,6 +27,7 @@ genessis.json
 tags
 
 # Files generated by the node when debugging
+cmd/node/node
 cmd/node/db/**
 cmd/node/stats/**
 
diff --git a/factory/status/statusComponents.go b/factory/status/statusComponents.go
index b8c5cf2916..bc9bb0ef83 100644
--- a/factory/status/statusComponents.go
+++ b/factory/status/statusComponents.go
@@ -48,6 +48,7 @@ type StatusComponentsFactoryArgs struct {
 	NetworkComponents    factory.NetworkComponentsHolder
 	StateComponents      factory.StateComponentsHolder
 	CryptoComponents     factory.CryptoComponentsHolder
+	DataComponents       factory.DataComponentsHolder
 	IsInImportMode       bool
 }
 
@@ -64,6 +65,7 @@ type statusComponentsFactory struct {
 	networkComponents    factory.NetworkComponentsHolder
 	stateComponents      factory.StateComponentsHolder
 	cryptoComponents     factory.CryptoComponentsHolder
+	dataComponents       factory.DataComponentsHolder
 	isInImportMode       bool
 }
 
@@ -95,6 +97,9 @@ func NewStatusComponentsFactory(args StatusComponentsFactoryArgs) (*statusCompon
 	if check.IfNil(args.CryptoComponents) {
 		return nil, errors.ErrNilCryptoComponents
 	}
+	if check.IfNil(args.DataComponents) {
+		return nil, errors.ErrNilDataComponents
+	}
 
 	return &statusComponentsFactory{
 		config:               args.Config,
@@ -109,6 +114,7 @@ func NewStatusComponentsFactory(args StatusComponentsFactoryArgs) (*statusCompon
 		stateComponents:      args.StateComponents,
 		isInImportMode:       args.IsInImportMode,
 		cryptoComponents:     args.CryptoComponents,
+		dataComponents:       args.DataComponents,
 	}, nil
 }
 
@@ -155,6 +161,9 @@ func (scf *statusComponentsFactory) Create() (*statusComponents, error) {
 
 	_, cancelFunc := context.WithCancel(context.Background())
 
+	scf.dataComponents.Datapool().Transactions().RegisterOnAdded(outportHandler.NewTransactionInPool)
+	scf.dataComponents.Datapool().UnsignedTransactions().RegisterOnAdded(outportHandler.NewTransactionInPool)
+
 	statusComponentsInstance := &statusComponents{
 		nodesCoordinator:    scf.nodesCoordinator,
 		softwareVersion:     softwareVersionChecker,
@@ -228,6 +237,7 @@ func (scf *statusComponentsFactory) createOutportDriver() (outport.OutportHandle
 		EventNotifierFactoryArgs:  eventNotifierArgs,
 		HostDriversArgs:           hostDriversArgs,
 		IsImportDB:                scf.isInImportMode,
+		ChainHandler:              scf.dataComponents.Blockchain(),
 	}
 
 	return outportDriverFactory.CreateOutport(outportFactoryArgs)
diff --git a/node/nodeRunner.go b/node/nodeRunner.go
index 1837c78b42..902dcb71a7 100644
--- a/node/nodeRunner.go
+++ b/node/nodeRunner.go
@@ -413,6 +413,7 @@ func (nr *nodeRunner) executeOneComponentCreationCycle(
 		nodesCoordinatorInstance,
 		configs.ImportDbConfig.IsImportDBMode,
 		managedCryptoComponents,
+		managedDataComponents,
 	)
 	if err != nil {
 		return true, err
@@ -1087,6 +1088,7 @@ func (nr *nodeRunner) CreateManagedStatusComponents(
 	nodesCoordinator nodesCoordinator.NodesCoordinator,
 	isInImportMode bool,
 	cryptoComponents mainFactory.CryptoComponentsHolder,
+	dataComponents mainFactory.DataComponentsHolder,
 ) (mainFactory.StatusComponentsHandler, error) {
 	statArgs := statusComp.StatusComponentsFactoryArgs{
 		Config:               *nr.configs.GeneralConfig,
@@ -1101,6 +1103,7 @@ func (nr *nodeRunner) CreateManagedStatusComponents(
 		IsInImportMode:       isInImportMode,
 		StatusCoreComponents: managedStatusCoreComponents,
 		CryptoComponents:     cryptoComponents,
+		DataComponents:       dataComponents,
 	}
 
 	statusComponentsFactory, err := statusComp.NewStatusComponentsFactory(statArgs)
diff --git a/outport/disabled/disabledOutport.go b/outport/disabled/disabledOutport.go
index 97be7894c9..a1c71552cb 100644
--- a/outport/disabled/disabledOutport.go
+++ b/outport/disabled/disabledOutport.go
@@ -42,6 +42,10 @@ func (n *disabledOutport) SaveAccounts(_ *outportcore.Accounts) {
 func (n *disabledOutport) FinalizedBlock(_ *outportcore.FinalizedBlock) {
 }
 
+// NewTransactionInPool does nothing
+func (n *disabledOutport) NewTransactionInPool(key []byte, value interface{}) {
+}
+
 // Close does nothing
 func (n *disabledOutport) Close() error {
 	return nil
diff --git a/outport/factory/outportFactory.go b/outport/factory/outportFactory.go
index e7259bfc69..36cd7978fa 100644
--- a/outport/factory/outportFactory.go
+++ b/outport/factory/outportFactory.go
@@ -4,6 +4,7 @@ import (
 	"fmt"
 	"time"
 
+	"github.com/multiversx/mx-chain-core-go/data"
 	outportcore "github.com/multiversx/mx-chain-core-go/data/outport"
 	indexerFactory "github.com/multiversx/mx-chain-es-indexer-go/process/factory"
 	"github.com/multiversx/mx-chain-go/outport"
@@ -17,6 +18,7 @@ type OutportFactoryArgs struct {
 	ElasticIndexerFactoryArgs indexerFactory.ArgsIndexerFactory
 	EventNotifierFactoryArgs  *EventNotifierFactoryArgs
 	HostDriversArgs           []ArgsHostDriverFactory
+	ChainHandler              data.ChainHandler
 }
 
 // CreateOutport will create a new instance of OutportHandler
@@ -31,7 +33,7 @@ func CreateOutport(args *OutportFactoryArgs) (outport.OutportHandler, error) {
 		IsInImportDBMode: args.IsImportDB,
 	}
 
-	outportHandler, err := outport.NewOutport(args.RetrialInterval, cfg)
+	outportHandler, err := outport.NewOutport(args.RetrialInterval, cfg, args.ChainHandler)
 	if err != nil {
 		return nil, err
 	}
@@ -73,12 +75,13 @@ func createAndSubscribeElasticDriverIfNeeded(
 		return nil
 	}
 
-	elasticDriver, err := indexerFactory.NewIndexer(args)
-	if err != nil {
-		return err
-	}
+	// elasticDriver, err := indexerFactory.NewIndexer(args)
+	// if err != nil {
+	// 	return err
+	// }
 
-	return outport.SubscribeDriver(elasticDriver)
+	// return outport.SubscribeDriver(elasticDriver)
+	return nil
 }
 
 func createAndSubscribeEventNotifierIfNeeded(
diff --git a/outport/host/driver.go b/outport/host/driver.go
index d15771f28c..de80854304 100644
--- a/outport/host/driver.go
+++ b/outport/host/driver.go
@@ -91,6 +91,11 @@ func (o *hostDriver) FinalizedBlock(finalizedBlock *outport.FinalizedBlock) erro
 	return o.handleAction(finalizedBlock, outport.TopicFinalizedBlock)
 }
 
+// NewTransactionInPool will handle the new txs in pool
+func (o *hostDriver) NewTransactionInPool(transaction interface{}) error {
+	return o.handleAction(transaction, "NewTransactionInPool")
+}
+
 // GetMarshaller returns the internal marshaller
 func (o *hostDriver) GetMarshaller() marshal.Marshalizer {
 	return o.marshaller
diff --git a/outport/interface.go b/outport/interface.go
index 768920a770..990fda23ba 100644
--- a/outport/interface.go
+++ b/outport/interface.go
@@ -16,6 +16,7 @@ type Driver interface {
 	SaveValidatorsRating(validatorsRating *outportcore.ValidatorsRating) error
 	SaveAccounts(accounts *outportcore.Accounts) error
 	FinalizedBlock(finalizedBlock *outportcore.FinalizedBlock) error
+	NewTransactionInPool(transaction interface{}) error
 	GetMarshaller() marshal.Marshalizer
 	SetCurrentSettings(config outportcore.OutportConfig) error
 	RegisterHandler(handlerFunction func() error, topic string) error
@@ -33,6 +34,7 @@ type OutportHandler interface {
 	SaveValidatorsRating(validatorsRating *outportcore.ValidatorsRating)
 	SaveAccounts(accounts *outportcore.Accounts)
 	FinalizedBlock(finalizedBlock *outportcore.FinalizedBlock)
+	NewTransactionInPool(key []byte, value interface{})
 	SubscribeDriver(driver Driver) error
 	HasDrivers() bool
 	Close() error
diff --git a/outport/notifier/eventNotifier.go b/outport/notifier/eventNotifier.go
index 828b027c88..d280ad00a4 100644
--- a/outport/notifier/eventNotifier.go
+++ b/outport/notifier/eventNotifier.go
@@ -17,6 +17,7 @@ const (
 	pushEventEndpoint       = "/events/push"
 	revertEventsEndpoint    = "/events/revert"
 	finalizedEventsEndpoint = "/events/finalized"
+	NewTransactionEndpoint  = "/events/txpool"
 )
 
 type eventNotifier struct {
@@ -95,6 +96,17 @@ func (en *eventNotifier) FinalizedBlock(finalizedBlock *outport.FinalizedBlock)
 	return nil
 }
 
+// NewTransactionHandlerInPool converts tx in pool data in order to push it to subscribers
+func (en *eventNotifier) NewTransactionInPool(transaction interface{}) error {
+	err := en.httpClient.Post(NewTransactionEndpoint, transaction)
+	if err != nil {
+		// 	return fmt.Errorf("%w in eventNotifier.NewTransactionInPool while posting event data", err)
+		log.Error("Avoiding error => NewTransactionInPool", "error", err)
+	}
+
+	return nil
+}
+
 // SaveRoundsInfo returns nil
 func (en *eventNotifier) SaveRoundsInfo(_ *outport.RoundsInfo) error {
 	return nil
diff --git a/outport/outport.go b/outport/outport.go
index edcecc0691..6905f27dce 100644
--- a/outport/outport.go
+++ b/outport/outport.go
@@ -7,7 +7,12 @@ import (
 	"time"
 
 	"github.com/multiversx/mx-chain-core-go/core/check"
+	"github.com/multiversx/mx-chain-core-go/data"
 	outportcore "github.com/multiversx/mx-chain-core-go/data/outport"
+	"github.com/multiversx/mx-chain-core-go/data/rewardTx"
+	"github.com/multiversx/mx-chain-core-go/data/smartContractResult"
+	"github.com/multiversx/mx-chain-core-go/data/transaction"
+	"github.com/multiversx/mx-chain-go/storage/txcache"
 	logger "github.com/multiversx/mx-chain-logger-go"
 )
 
@@ -25,10 +30,20 @@ type outport struct {
 	timeForDriverCall time.Duration
 	messageCounter    uint64
 	config            outportcore.OutportConfig
+	chainHandler      data.ChainHandler
+}
+
+type NewTransactionInPool struct {
+	TxHash            []byte                   `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"txHash"`
+	CurrentBlockNonce uint64                   `protobuf:"varint,2,opt,name=CurrentBlockNonce,proto3" json:"currentBlockNonce,omitempty"`
+	Timestamp         uint64                   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"timestamp,omitempty"`
+	SenderShardID     uint32                   `protobuf:"varint,4,opt,name=SourceShardID,proto3" json:"sourceShardID,omitempty"`
+	ReceiverShardID   uint32                   `protobuf:"varint,5,opt,name=DestinationShardID,proto3" json:"destinationShardID,omitempty"`
+	Transaction       *transaction.Transaction `protobuf:"bytes,6,opt,name=Transaction,proto3" json:"transaction,omitempty"`
 }
 
 // NewOutport will create a new instance of proxy
-func NewOutport(retrialInterval time.Duration, cfg outportcore.OutportConfig) (*outport, error) {
+func NewOutport(retrialInterval time.Duration, cfg outportcore.OutportConfig, chainHandler data.ChainHandler) (*outport, error) {
 	if retrialInterval < minimumRetrialInterval {
 		return nil, fmt.Errorf("%w, provided: %d, minimum: %d", ErrInvalidRetrialInterval, retrialInterval, minimumRetrialInterval)
 	}
@@ -41,6 +56,7 @@ func NewOutport(retrialInterval time.Duration, cfg outportcore.OutportConfig) (*
 		logHandler:        log.Log,
 		timeForDriverCall: maxTimeForDriverCall,
 		config:            cfg,
+		chainHandler:      chainHandler,
 	}, nil
 }
 
@@ -341,6 +357,52 @@ func (o *outport) finalizedBlockBlocking(finalizedBlock *outportcore.FinalizedBl
 	}
 }
 
+// NewTransactionHandlerInPool implements OutportHandler.
+func (o *outport) NewTransactionInPool(key []byte, value interface{}) {
+	if check.IfNilReflect(value) {
+		return
+	}
+
+	switch t := value.(type) {
+	case *txcache.WrappedTransaction:
+		tx, isTransaction := t.Tx.(*transaction.Transaction)
+		if !isTransaction {
+			log.Warn("programming error in NewTransactionHandlerInPool, improper value",
+				"value type", fmt.Sprintf("%T", value),
+				"value.Tx type", fmt.Sprintf("%T", t.Tx))
+			return
+		}
+
+		nonce := o.chainHandler.GetCurrentBlockHeader().GetNonce()
+
+		finalTx := NewTransactionInPool{
+			TxHash:            key,
+			CurrentBlockNonce: nonce,
+			Timestamp:         uint64(time.Now().Unix()),
+			SenderShardID:     t.SenderShardID,
+			ReceiverShardID:   t.ReceiverShardID,
+			Transaction:       tx,
+		}
+
+		log.Debug("Hey Tx ", "hash", "SndAddr", finalTx.TxHash, finalTx.Transaction.SndAddr)
+		for _, driver := range o.drivers {
+			err := driver.NewTransactionInPool(finalTx)
+			if err == nil {
+				return
+			}
+		}
+	case *rewardTx.RewardTx:
+		// TODO something with the reward transaction
+		_ = t
+	case *smartContractResult.SmartContractResult:
+		// TODO something with the smart contract result transaction
+		_ = t
+	default:
+		log.Warn("programming error in NewTransactionHandlerInPool, improper value",
+			"value type", fmt.Sprintf("%T", value))
+	}
+}
+
 // Close will close all the drivers that are in outport
 func (o *outport) Close() error {
 	close(o.chanClose)
-- 
2.34.1

